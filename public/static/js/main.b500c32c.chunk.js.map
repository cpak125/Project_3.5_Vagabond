{"version":3,"sources":["components/LandingPage.js","components/NavBar.js","components/EditPostForm.js","components/SinglePost.js","components/NewPostForm.js","components/SingleCity.js","components/SignIn.js","App.js","serviceWorker.js","index.js"],"names":["StyledCarouselText","styled","div","_templateObject","StyledCarouselImage","img","_templateObject2","Page","_templateObject3","StyledCitiesList","_templateObject4","StyledCardImage","Image","_templateObject5","LandingPage","state","cities","componentDidMount","_callee","regenerator_default","a","wrap","_context","prev","next","_this","fetchCities","stop","this","_callee2","response","_context2","axios","get","sent","setState","data","citiesList","map","city","i","react_default","createElement","key","Link","to","concat","id","Card","src","Content","Header","name","lib","dynamicHeight","autoPlay","showThumbs","showIndicators","showStatus","interval","infiniteLoop","transitionTime","Component","Navbar","NavBar_templateObject","LeftBox","NavBar_templateObject2","RightBox","NavBar_templateObject3","NavBar","EditPostForm","post","title","body","modalOpen","handleChange","event","Object","objectSpread","target","value","handleSubmit","cityId","postId","props","preventDefault","put","push","fetchData","handleOpen","editPostModal","Modal","trigger","Button","onClick","open","form","Form","onSubmit","type","onChange","SinglePostContainer","SinglePost_templateObject","SinglePost","city_id","post_id","responseCity","responsePost","match","params","handleDelete","_callee3","_context3","swal","icon","buttons","dangerMode","then","willDelete","asyncToGenerator","mark","delete","history","_this2","EditPostForm_EditPostForm","StyledForm","NewPostForm_templateObject","NewPostForm","newPost","addNewPost","addNewPostModal","placeholder","height","className","SingleCity_templateObject","CityPicture","SingleCity_templateObject2","Caption","SingleCity_templateObject3","CityName","SingleCity_templateObject4","PostContainer","SingleCity_templateObject5","StyledCard","_templateObject6","SingleCity","posts","postContent","header","description","extra","created_at","SingleCity_Page","alt","NewPostForm_NewPostForm","reverse","SignInContainer","SignIn_templateObject","SignIn","App","BrowserRouter","NavBar_NavBar","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b500c32c.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport axios from 'axios'\nimport { Card, Image } from 'semantic-ui-react'\nimport { Carousel } from 'react-responsive-carousel'\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"\nimport { Link } from 'react-router-dom'\n\nconst StyledCarouselText = styled.div`\n  font-weight: bold;\n  font-style: italic;\n  position: absolute;\n  font-size:150px;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: white;\n  opacity: 0.8;\n`\nconst StyledCarouselImage = styled.img`\n height: 50.5vw;\n background-color:black;\n`\n\nconst Page = styled.div`\n  background: #f1f1f1;\n`\nconst StyledCitiesList = styled.div`\n  padding-top:100px;\n  padding-bottom:50px;\n  display:flex;\n  justify-content: space-evenly;\n`\n\nconst StyledCardImage = styled(Image)`\n  &&&{\n    height: 115px;\n  }\n`\n\n\nexport default class LandingPage extends Component {\n  state = {\n    cities: []\n  }\n\n  componentDidMount = async () => {\n    await this.fetchCities()\n  }\n\n  fetchCities = async () => {\n    const response = await axios.get('api/cities')\n    this.setState({ cities: response.data })\n  }\n\n  render() {\n    const citiesList = this.state.cities.map((city, i) => {\n      return (\n        <div key={i}>\n          <Link to={`/cities/${city.id}`}>\n            <Card>\n              <StyledCardImage src={city.img} />\n              <Card.Content>\n                <Card.Header>{city.name}</Card.Header>\n              </Card.Content>\n            </Card>\n          </Link>\n        </div>\n      )\n    })\n    return (\n\n      <Page>\n        <Carousel dynamicHeight={true} autoPlay={true} showThumbs={false} showIndicators={false} showStatus={false} interval={8000} infiniteLoop={true} transitionTime={2000}>\n          <div>\n            <StyledCarouselImage></StyledCarouselImage>\n          </div>\n          <div>\n            <StyledCarouselImage src='https://i.imgur.com/ryX9LiT.jpg' />\n          </div>\n          <div>\n            <StyledCarouselImage src=\"https://i.imgur.com/EwfNdxu.jpg\" />\n          </div>\n          <div>\n            <StyledCarouselImage src=\"https://i.imgur.com/vKlbMZD.jpg\" />\n          </div>\n        </Carousel>\n        <StyledCarouselText>Vagabond</StyledCarouselText>\n\n        <StyledCitiesList>\n          {citiesList}\n        </StyledCitiesList>\n      </Page>\n\n    )\n  }\n}","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\n\nconst Navbar = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  /* border-bottom: 1px solid black; */\n  background: grey;\n  color: #f1f1f1;\n  position: fixed;\n  top: 0;\n  width: 100vw;\n`\nconst LeftBox = styled.div`\n  font: 30px 'Noto Sans', sans-serif;\n  font-weight: bold;\n  font-style: italic;\n  align-self: flex-start;\n  padding-left: 20px;\n`\nconst RightBox = styled(Link)`\n&&&{\n  font: 14px 'Noto Sans', sans-serif;\n  align-self: center;\n  padding-right: 20px;\n  color:white;\n}\n  `\n\nexport default class NavBar extends Component {\n  render() {\n    return (\n      <Navbar>\n        <LeftBox>Vagabond</LeftBox>\n        <RightBox to='/signin'>|Sign in|</RightBox>\n      </Navbar>\n    )\n  }\n}","import React, { Component } from 'react'\nimport axios from 'axios'\nimport { Form, Button, Modal } from 'semantic-ui-react'\n\nexport default class EditPostForm extends Component {\n    state = {\n        post: {\n            title: '',\n            body: ''\n        },\n        modalOpen: false\n    }\n\n\n    handleChange = (event) => {\n        const post = { ...this.state.post }\n        post[event.target.name] = event.target.value\n        this.setState({ post })\n    }\n\n    handleSubmit = async (event) => {\n        const cityId = this.props.cityId\n        const postId = this.props.postId\n        event.preventDefault()\n        await axios.put(`/api/cities/${cityId}/posts/${postId}`, this.state.post)\n        this.props.push(`/cities/${cityId}/posts/${postId}`)\n        this.setState({ modalOpen: false })\n        await this.props.fetchData\n    }\n\n    handleOpen = () => this.setState({ modalOpen: true })\n\n    editPostModal = () => (\n        \n        <Modal trigger={<Button onClick={this.handleOpen}>Edit</Button>}\n            open={this.state.modalOpen}\n        >\n            <Modal.Content form>\n                <Form onSubmit={this.handleSubmit}>\n                    Title:<input type='text' name='title'\n                        value={this.state.post.title}\n                        onChange={this.handleChange}\n                    />\n                    Body:<input type='text' name='body'\n                        value={this.state.post.body}\n                        onChange={this.handleChange}\n                    />\n                    <Button type='submit' value='Update Post'>Submit</Button>\n                </Form>\n\n            </Modal.Content>\n        </Modal>\n    )\n\n\n    render() {\n        return (\n            this.editPostModal()\n\n        )\n\n        // <div>\n        //     <h2>Edit Post</h2>\n        //     <form onSubmit={this.handleSubmit}>\n        //         Title:<input type='text' name='title'\n        //             value={this.state.post.title}\n        //             onChange={this.handleChange}\n        //         />\n        //         Body:<input type='text' name='body'\n        //             value={this.state.post.body}\n        //             onChange={this.handleChange}\n        //         />\n        //         <input type='submit' value='Update Post' />\n        //     </form>\n        // </div>\n\n    }\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport swal from 'sweetalert'\nimport { Button, Modal } from 'semantic-ui-react'\nimport EditPostForm from './EditPostForm';\nimport styled from 'styled-components'\n\nconst SinglePostContainer = styled.div`\n   padding: 100px;\n`\n\n\nexport default class SinglePost extends Component {\n    state = {\n        city: {},\n        post: {}\n    }\n\n    async componentDidMount() {\n        this.fetchData()\n    }\n\n    fetchData= async () => {\n        const city_id = this.props.match.params.city_id\n        const post_id = this.props.match.params.id\n        const responseCity = await axios.get(`/api/cities/${city_id}`)\n        const responsePost = await axios.get(`/api/cities/${city_id}/posts/${post_id}`)\n        this.setState({ city: responseCity.data, post: responsePost.data })\n\n    }\n\n    handleDelete = async (postId) => {\n        swal({\n            title: `Are You Sure You want to Delete ${this.state.post.title} ?`,\n            icon: \"warning\",\n            buttons: true,\n            dangerMode: true,\n        })\n            .then((willDelete) => {\n                if (willDelete) {\n                    swal('Success!', { icon: \"success\" })\n                        .then(async () => {\n                            const city_id = this.props.match.params.city_id\n                            await axios.delete(`/api/cities/${city_id}/posts/${postId}`)\n                            this.props.history.push(`/cities/${city_id}`)\n                        })\n                } else {\n                    swal(\"Successfully Cancelled\");\n                }\n            })\n    }\n\n\n    render() {\n        const city = this.state.city\n        const post = this.state.post\n        return (\n            <SinglePostContainer>\n                <h2>{city.name}</h2>\n                <h1>{post.title}</h1>\n                <p>{post.body}</p>\n                <EditPostForm\n                    cityId={this.props.match.params.city_id}\n                    postId={this.props.match.params.id}\n                    push={this.props.history.push}\n                    fetchData={this.fetchData()}\n                />\n                <Button onClick={() => this.handleDelete(post.id)}>Delete</Button>\n            </SinglePostContainer>\n        )\n    }\n}","import React, { Component } from 'react'\nimport { Form, Button, Modal } from 'semantic-ui-react'\nimport styled from 'styled-components'\n\nconst StyledForm = styled(Form)`\n    &&& {\n        width: 30vw; \n        margin:auto;   \n    }\n`\n\nexport default class NewPostForm extends Component {\n    state = {\n        newPost: {\n            title: '',\n            body: ''\n        },\n        modalOpen: false\n    }\n\n    handleOpen = () => this.setState({ modalOpen: true })\n\n    handleChange = (event) => {\n        const newPost = { ...this.state.newPost }\n        newPost[event.target.name] = event.target.value\n        this.setState({ newPost })\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault()\n        const newPost = { ...this.state.newPost }\n        this.props.addNewPost(newPost)\n        this.setState({\n            newPost: {\n                title: '',\n                body: ''\n            }\n        })\n        this.setState({ modalOpen: false })\n    }\n\n    addNewPostModal = () => (\n        <Modal trigger={<Button onClick={this.handleOpen}>Add New Post</Button>}\n            open={this.state.modalOpen}\n            >\n            <Modal.Content form>\n                <StyledForm onSubmit={this.handleSubmit}>\n                    <input onChange={this.handleChange} type=\"text\" name=\"title\" value={this.state.newPost.title} placeholder='Title' />\n                    <input onChange={this.handleChange} type=\"text\" name=\"body\" value={this.state.newPost.body} placeholder='Body' height='50%' />\n                    <Button  className='update' type='submit' value='Add Post'>Submit</Button>\n                </StyledForm>\n            </Modal.Content>\n        </Modal>\n    )\n    render() {\n        return (\n            this.addNewPostModal()\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport axios from 'axios'\nimport NewPostForm from './NewPostForm';\nimport styled from 'styled-components'\nimport { Card, Button, Modal } from 'semantic-ui-react'\n\nconst Page = styled.div`\n    margin: auto;\n    background: #f1f1f1;\n`\n\nconst CityPicture = styled.img`\n    width: 100vw;\n    padding-top: 60px;\n    position: relative;\n`\nconst Caption = styled.div`\n    color: white;\n    font-size: 50px;\n    left: 0;\n    position:absolute;\n    text-align:center;\n    top: 20px;\n    width: 100%;\n    font-family: 'Noto Sans', sans-serif;\n    font-style: italic;\n`\n\nconst CityName = styled.div`\n    padding-left: 30px;\n    padding-top: 20px;\n    width: 100vw;\n    display: block;\n    justify-content: center;\n    align-items: baseline;\n    background: #f1f1f1;\n`\nconst PostContainer = styled.div`\n    width: 100vw;\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    padding: 30px;\n    background: #f1f1f1;\n`\nconst StyledCard = styled(Card)`\n    &&&{\n        width: 600px;\n    }\n`\n\nexport default class SingleCity extends Component {\n    state = {\n        city: {},\n        posts: [],\n    }\n\n    fetchData = async () => {\n        const cityId = this.props.match.params.id\n        const responseCity = await axios.get(`/api/cities/${cityId}`)\n        const responsePost = await axios.get(`/api/cities/${cityId}/posts`)\n        this.setState({\n            posts: responsePost.data,\n            city: responseCity.data\n        })\n    }\n\n    async componentDidMount() {\n        this.fetchData()\n    }\n\n    addNewPost = async (newPost) => {\n        const id = this.props.match.params.id\n        await axios.post(`/api/cities/${id}/posts`, newPost)\n        this.fetchData()\n    }\n\n    render() {\n        const city = this.state.city\n        const postContent = this.state.posts.map((post, i) => {\n            return (\n                <Link to={`/cities/${post.city_id}/posts/${post.id}`}>\n                <StyledCard key={i}>\n                    <Card.Content header={post.title}/>\n                    <Card.Content description={post.body} />\n                    <Card.Content extra>\n                        {post.created_at}\n                    </Card.Content>\n                </StyledCard>\n                </Link>\n            )\n        })\n        return (\n            <Page>\n                <CityPicture src={city.img} alt={city.name} />\n                <Caption>{city.name}</Caption>\n                <CityName>\n                        <NewPostForm \n                        addNewPost={this.addNewPost}\n                         /> \n                </CityName>\n                <PostContainer>\n                    {postContent.reverse()}\n                </PostContainer>\n                \n            </Page>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\n\nconst SignInContainer = styled.div`\n    padding:60px;\n    font-size: 60px;\n`\n\nexport default class SignIn extends Component {\n    render() {\n        return (\n            <SignInContainer>\n                Coming Soon\n            </SignInContainer>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport LandingPage from './components/LandingPage'\nimport NavBar from './components/NavBar';\nimport SinglePost from './components/SinglePost'\nimport SingleCity from './components/SingleCity';\nimport SignIn from './components/SignIn';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <NavBar/>\n          <Switch>\n            <Route exact path ='/' component={LandingPage}/>\n            <Route exact path ='/signin' component={SignIn} />\n            <Route exact path ='/cities/:id' component={SingleCity} /> \n            <Route exact path ='/cities/:city_id/posts/:id' component={SinglePost} /> \n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}