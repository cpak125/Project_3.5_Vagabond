{"version":3,"sources":["components/LandingPage.js","components/NavBar.js","components/SinglePost.js","components/NewPostForm.js","components/SingleCity.js","components/EditPostForm.js","App.js","serviceWorker.js","index.js"],"names":["CarouselContainer","styled","div","_templateObject","Page","_templateObject2","StyledGrid","Grid","_templateObject3","LandingPage","state","cities","componentDidMount","_callee","regenerator_default","a","wrap","_context","prev","next","_this","fetchCities","stop","this","_callee2","response","_context2","axios","get","sent","setState","data","citiesList","map","city","i","react_default","createElement","GridColumn","key","Card","href","concat","id","Image","src","img","Content","Header","name","lib","showThumbs","width","autoPlay","interval","infiniteLoop","transitionTime","className","columns","Row","Component","Navbar","NavBar_templateObject","LeftBox","NavBar_templateObject2","RightBox","NavBar_templateObject3","NavBar","SinglePost","post","fetchOneCity","city_id","props","match","params","abrupt","fetchOnePost","post_id","handleDelete","_callee4","postId","_context4","swal","title","icon","buttons","dangerMode","then","willDelete","Object","asyncToGenerator","mark","_callee3","_context3","delete","history","push","_this2","body","onClick","Link","to","StyledForm","Form","NewPostForm_templateObject","NewPostForm","newPost","handleChange","event","objectSpread","target","value","handleSubmit","preventDefault","addNewPost","onSubmit","onChange","type","placeholder","Button","SingleCity_templateObject","CityPicture","SingleCity_templateObject2","CityName","SingleCity_templateObject3","PostContainer","_templateObject4","SingleCity","posts","showNewPostForm","fetchData","cityId","responseCity","responsePost","toggleShowNewPostForm","postContent","header","description","SingleCity_Page","alt","NewPostForm_NewPostForm","reverse","EditPostForm","put","App","BrowserRouter","NavBar_NavBar","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fc510d31.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport axios from 'axios'\nimport { Grid, Card, Image, GridColumn } from 'semantic-ui-react'\nimport { Carousel } from 'react-responsive-carousel'\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"\n\nconst CarouselContainer = styled.div`\n  padding: 40px;\n  height: 200px;\n  align-items: center;\n  margin: auto;\n  margin-bottom: 300px;\n  text-align: center;\n`\nconst Page = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  background: #f1f1f1;\n  height: 93vh;\n`\nconst StyledGrid = styled(Grid)`\n  &&&{\n    margin: auto;\n  }\n`\nexport default class LandingPage extends Component {\n  state = {\n    cities: []\n  }\n\n  componentDidMount = async () => {\n    await this.fetchCities()\n  }\n\n  fetchCities = async () => {\n    const response = await axios.get('api/cities')\n    this.setState({ cities: response.data })\n  }\n\n  render() {\n    const citiesList = this.state.cities.map((city, i) => {\n      return (\n        // <Link key={i} to={`cities/${city.id}`}>{city.name}</Link>\n        <GridColumn key={i}>\n        <Card href={`cities/${city.id}`}>\n        <Image src={city.img} />\n        <Card.Content>\n          <Card.Header>{city.name}</Card.Header>\n        </Card.Content>\n        </Card>\n        </GridColumn>\n      )\n    })\n    return (\n    \n      <Page>\n        <CarouselContainer>\n          <Carousel showThumbs={false} width={800} autoPlay={true} interval={5000} infiniteLoop={true} transitionTime={1000}>\n            <div>\n              <img src='https://www.visitmacysusa.com/sites/default/files/styles/hero/public/macys-los-angeles-skyline-at-night-header.jpg?itok=FTikBOPJ' />\n              <p className=\"legend\"> Los Angeles</p>\n            </div>\n            <div>\n              <img src=\"https://xixerone.com/en/wp-content/uploads/sites/2/2017/09/Best-areas-to-stay-in-Dallas-Texas.jpg\" />\n              <p className=\"legend\">Dallas</p>\n            </div>\n            <div>\n              <img src=\"https://i.imgur.com/PMSkWN5.jpg\" />\n              <p className=\"legend\">Atlanta</p>\n            </div>\n          </Carousel>\n        </CarouselContainer>\n\n        <StyledGrid columns='equal'>\n          <Grid.Row>\n              {citiesList}\n          </Grid.Row>\n        </StyledGrid>\n      </Page>\n       \n    )\n  }\n}","import React, { Component } from 'react'\nimport styled from 'styled-components'\n\nconst Navbar = styled.div`\n  display: flex;\n  justify-content: space-between;\n  /* font: 56px 'Damion', cursive; */\n  padding-top: 10px;\n  padding-bottom: 10px;\n  border-bottom: 1px solid black;\n  background: grey;\n  color: #f1f1f1;\n`\nconst LeftBox = styled.div`\n  font: 30px 'Noto Sans', sans-serif;\n  font-weight: bold;\n  font-style: italic;\n  align-self: flex-start;\n  padding-left: 20px;\n`\nconst RightBox = styled.div`\n  font: 14px 'Noto Sans', sans-serif;\n  align-self: center;\n  padding-right: 20px;\n`\n\n\nexport default class NavBar extends Component {\n  render() {\n    return (\n      <Navbar>\n        <LeftBox>Vagabond</LeftBox>\n        <RightBox>|Sign in|</RightBox>\n      </Navbar>\n    )\n  }\n}","import React, { Component } from 'react'\nimport axios from 'axios'\nimport swal from 'sweetalert'\nimport {Link} from 'react-router-dom'\n\n\nexport default class SinglePost extends Component {\n    state = {\n        city: {},\n        post: {}\n    }\n\n    async componentDidMount() {\n        const city_id = this.props.match.params.city_id\n\n        const city = await this.fetchOneCity(city_id)\n        const post = await this.fetchOnePost(city_id)\n\n        this.setState({ city, post })\n    }\n\n    fetchOneCity = async () => {\n        const city_id = this.props.match.params.city_id\n        const response = await axios.get(`/api/cities/${city_id}`)\n        return response.data\n        \n    }\n\n    fetchOnePost = async () => {\n        const city_id = this.props.match.params.city_id\n        const post_id = this.props.match.params.id\n\n        const response = await axios.get(`/api/cities/${city_id}/posts/${post_id}`)\n        return response.data\n    }\n\n    handleDelete = async (postId) => {\n            swal({\n              title: `Are You Sure You want to Delete ${this.state.post.title} ?`,\n              icon: \"warning\",\n              buttons: true,\n              dangerMode: true,\n            })\n              .then((willDelete) => {\n                if (willDelete) {\n                  swal('Success!', { icon: \"success\" })\n                    .then( async () => {\n                        const city_id = this.props.match.params.city_id\n                        await axios.delete(`/api/cities/${city_id}/posts/${postId}`)\n                        this.props.history.push(`/cities/${city_id}`)\n                    })\n                } else {\n                  swal(\"Successfully Cancelled\");\n                }\n              })\n          }\n    \n\n    render() {\n        const city = this.state.city\n        const post = this.state.post\n        return (\n            <div>\n                <h2>{city.name}</h2>\n                <h1>{post.title}</h1>\n                <p>{post.body}</p>\n                <button onClick = {()=> this.handleDelete(post.id)}>Delete</button>\n                <Link to = {`/cities/${city.id}/posts/${post.id}/edit`}>Edit </Link>\n\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Form, Button } from 'semantic-ui-react'\nimport styled from 'styled-components'\n\nconst StyledForm = styled(Form)`\n    &&& {\n        width: 30vw;\n    }\n`\n\nexport default class NewPostForm extends Component {\n    state = {\n        newPost: {\n            title: '',\n            body: ''\n        }\n    }\n\n    handleChange = (event) => {\n        const newPost = { ...this.state.newPost }\n        newPost[event.target.name] = event.target.value\n        this.setState({ newPost })\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault()\n        const newPost = { ...this.state.newPost }\n        this.props.addNewPost(newPost)\n        this.setState({\n            newPost: {\n                title: '',\n                body: ''\n            }\n        })\n    }\n    render() {\n        return (\n            <StyledForm onSubmit={this.handleSubmit}>\n                <input onChange={this.handleChange} type=\"text\" name=\"title\" value={this.state.newPost.title} placeholder='Title' />\n                <input onChange={this.handleChange} type=\"text\" name=\"body\" value={this.state.newPost.body} placeholder='Body' />\n                <Button className='update' type='submit' value='Add Post'>Submit</Button>\n            </StyledForm>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport axios from 'axios'\nimport NewPostForm from './NewPostForm';\nimport styled from 'styled-components'\nimport { Card, Button } from 'semantic-ui-react'\n\nconst Page = styled.div`\n    margin: auto;\n`\n\nconst CityPicture = styled.img`\n    width: 100vw;\n    height: 400px;\n`\n\nconst CityName = styled.div`\n    padding-left: 15px;\n    width: 100vw;\n    display: block;\n    justify-content: center;\n    align-items: baseline;\n    background: #f1f1f1;\n`\nconst PostContainer = styled.div`\n    width: 100vw;\n    height: 39vh;\n    padding: 30px;\n    overflow: scroll;\n    overflow-x: hidden;\n    background: #f1f1f1;\n    /* margin: auto; */\n`\n\nexport default class SingleCity extends Component {\n    state = {\n        city: {},\n        posts: [],\n        showNewPostForm: false\n    }\n\n    fetchData = async () => {\n        const cityId = this.props.match.params.id\n        const responseCity = await axios.get(`/api/cities/${cityId}`)\n        const responsePost = await axios.get(`/api/cities/${cityId}/posts`)\n        this.setState({\n            posts: responsePost.data,\n            city: responseCity.data\n        })\n    }\n\n    async componentDidMount() {\n        this.fetchData()    \n    }\n\n    toggleShowNewPostForm = () => {\n        this.setState({ showNewPostForm: !this.state.showNewPostForm })\n    }\n\n    addNewPost = async (newPost) => {\n        const id = this.props.match.params.id\n        await axios.post(`/api/cities/${id}/posts`, newPost)\n        this.fetchData()\n    }\n\n\n    render() {\n        const city = this.state.city\n\n        const postContent = this.state.posts.map((post, i) => {\n            return (\n                <Card key={i}>\n                    \n                    <Card.Content href={`/cities/${post.city_id}/posts/${post.id}`}  header={post.title}/>\n                    <Card.Content description={post.body} />\n                \n                    </Card>\n            )\n        })\n        return (\n            <Page>\n                <div><CityPicture src={city.img} alt={city.name}/></div>\n                <CityName>\n                    <h1>{city.name}</h1> \n                        <Button onClick={this.toggleShowNewPostForm}>Add New Post</Button>\n                            {this.state.showNewPostForm ?\n                            <NewPostForm\n                            addNewPost = {this.addNewPost} /> : ''\n                            }\n                </CityName>\n                <PostContainer>\n                        {postContent.reverse()}\n                </PostContainer>\n            </Page>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\n\nexport default class EditPostForm extends Component {\n    state = {\n        post: {\n            title: '',\n            body: ''\n        }\n    }\n\n    handleChange = (event) => {\n        const post = { ...this.state.post}\n        post[event.target.name] = event.target.value\n        this.setState({ post })\n    }\n\n    handleSubmit = async (event) => {\n        const cityId = this.props.match.params.city_id\n        const postId = this.props.match.params.id\n        event.preventDefault()\n        await axios.put(`/api/cities/${cityId}/posts/${postId}`, this.state.post)\n        this.props.history.push(`/cities/${cityId}/posts/${postId}`)\n      }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <input type='text' name='title'\n                        value={this.state.post.title}\n                        onChange={this.handleChange}\n                    />\n                    <input type='text' name='body'\n                        value={this.state.post.body}\n                        onChange={this.handleChange}\n                    />\n                    <input type='submit' value='Update Post' />\n                </form>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport LandingPage from './components/LandingPage'\nimport NavBar from './components/NavBar';\nimport SinglePost from './components/SinglePost'\nimport SingleCity from './components/SingleCity';\nimport EditPostForm from './components/EditPostForm';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <NavBar/>\n          <Switch>\n            <Route exact path='/' component={LandingPage}/>\n            <Route exact path ='/cities/:id' component={SingleCity} /> \n            <Route exact path ='/cities/:city_id/posts/:id' component={SinglePost} /> \n            <Route exact path = '/cities/:city_id/posts/:id/edit' component= {EditPostForm} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}